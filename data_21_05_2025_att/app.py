import streamlit as st  # Importa o m√≥dulo Streamlit para criar a interface web
import pandas as pd     # Importa a biblioteca pandas para manipula√ß√£o de dados
import seaborn as sns   # Importa a biblioteca Seaborn para gr√°ficos estat√≠sticos
import matplotlib.pyplot as plt  # Importa o Matplotlib para cria√ß√£o de gr√°ficos

# Configura√ß√µes iniciais da interface
st.set_page_config(page_title="An√°lise de Consumo El√©trico", layout="wide")  # Define t√≠tulo da aba e layout da p√°gina
st.title("‚ö° An√°lise de Consumo El√©trico no Brasil (2006‚Äì2020)")  # Exibe o t√≠tulo principal no topo da p√°gina

# Carrega o dataset CSV com os dados de consumo
df = pd.read_csv("consumo_eletrico_streamlit.csv")  # L√™ o arquivo CSV com os dados e armazena em um DataFrame

# Convers√£o de colunas num√©ricas (anos, popula√ß√£o e temperatura)
anos = [str(ano) for ano in range(2006, 2021)]  # Cria lista com os anos de 2006 a 2020 como strings
df[anos] = df[anos].apply(pd.to_numeric, errors="coerce")  # Converte os dados de consumo por ano para valores num√©ricos
df["populacao"] = pd.to_numeric(df["populacao"], errors="coerce")  # Converte a coluna popula√ß√£o para n√∫mero
df["temp_media"] = pd.to_numeric(df["temp_media"], errors="coerce")  # Converte a temperatura m√©dia para n√∫mero

# C√°lculos adicionais
df["total_consumo"] = df[anos].sum(axis=1)  # Soma o consumo de todos os anos para cada linha (localidade)
df["crescimento"] = df["2020"] - df["2006"]  # Calcula o crescimento do consumo entre 2006 e 2020

# Cria um menu lateral com as op√ß√µes de gr√°fico
opcao = st.sidebar.selectbox(  # Cria um dropdown na barra lateral para escolher o gr√°fico
    "Selecione o gr√°fico que deseja visualizar:",
    [
        "üìà Consumo M√©dio ao Longo dos Anos",     # Op√ß√£o 1
        "üå± Consumo Total por Bioma",             # Op√ß√£o 2
        "üë• Popula√ß√£o vs Consumo Total",          # Op√ß√£o 3
        "üå°Ô∏è Temperatura M√©dia vs Consumo Total", # Op√ß√£o 4
        "üöÄ Top 10 Crescimento de Consumo"        # Op√ß√£o 5
    ]
)

# === GR√ÅFICO 1 ===
if opcao == "üìà Consumo M√©dio ao Longo dos Anos":
    st.subheader("üìà Consumo El√©trico M√©dio ao Longo dos Anos")  # Subt√≠tulo da se√ß√£o
    st.caption("üìà Gr√°fico 1 - Tipo: **Descritivo e Demonstrativo**. Mostra a m√©dia de consumo de energia el√©trica anual no Brasil (2006‚Äì2020).")  # Descri√ß√£o

    media_anual = df[anos].mean()  # Calcula a m√©dia do consumo em cada ano
    fig, ax = plt.subplots(figsize=(10, 4))  # Cria uma figura com tamanho espec√≠fico
    sns.lineplot(x=media_anual.index.astype(str), y=media_anual.values, marker="o", ax=ax)  # Gera gr√°fico de linha

    for ano, valor in zip(media_anual.index.astype(str), media_anual.values):  # Adiciona valores sobre os pontos
        ax.text(ano, valor + (max(media_anual.values) * 0.01), f"{valor:.2f}", ha='center', va='bottom', fontsize=8, color='black')

    ax.set_xlabel("Ano")  # R√≥tulo do eixo X
    ax.set_ylabel("Consumo M√©dio")  # R√≥tulo do eixo Y
    ax.set_title("Consumo El√©trico M√©dio por Ano (Brasil)")  # T√≠tulo do gr√°fico
    ax.grid(True)  # Ativa a grade de fundo
    st.pyplot(fig)  # Exibe o gr√°fico no Streamlit

# === GR√ÅFICO 2 ===
elif opcao == "üå± Consumo Total por Bioma":
    st.subheader("üå± Consumo Total por Bioma")  # Subt√≠tulo da se√ß√£o
    st.caption("üå± Gr√°fico 2 - Tipo: **Descritivo e Demonstrativo**. Compara o total consumido por bioma de 2006 a 2020, com exibi√ß√£o detalhada por bioma.")  # Descri√ß√£o

    bioma_consumo = df.groupby("bioma")["total_consumo"].sum().sort_values(ascending=False)  # Soma o total por bioma e ordena decrescente

    fig, ax = plt.subplots(figsize=(10, 4))  # Cria figura
    sns.barplot(x=bioma_consumo.index, y=bioma_consumo.values, ax=ax)  # Cria gr√°fico de barras
    ax.set_xlabel("Bioma")  # Eixo X
    ax.set_ylabel("Consumo Total (GWh)")  # Eixo Y
    ax.set_title("Consumo Total por Bioma (2006‚Äì2020)")  # T√≠tulo
    ax.tick_params(axis='x', rotation=45)  # Rotaciona os nomes dos biomas
    st.pyplot(fig)  # Mostra o gr√°fico

    st.markdown("### üî¢ Consumo Total por Bioma (valores num√©ricos)")  # T√≠tulo da tabela
    st.dataframe(bioma_consumo.reset_index().rename(columns={
        "bioma": "Bioma",
        "total_consumo": "Consumo Total (GWh)"
    }))  # Exibe os dados em formato de tabela interativa

# === GR√ÅFICO 3 ===
elif opcao == "üë• Popula√ß√£o vs Consumo Total":
    st.subheader("üë• Popula√ß√£o vs Consumo Total")  # Subt√≠tulo
    st.caption("üë• Gr√°fico 3 - Tipo: **Demonstrativo**. Mostra a rela√ß√£o entre o tamanho da popula√ß√£o e o total consumido.")  # Descri√ß√£o

    fig, ax = plt.subplots(figsize=(8, 5))  # Figura
    sns.scatterplot(data=df, x="populacao", y="total_consumo", ax=ax)  # Gr√°fico de dispers√£o
    ax.set_title("Popula√ß√£o vs Consumo Total")  # T√≠tulo
    ax.set_xlabel("Popula√ß√£o")  # Eixo X
    ax.set_ylabel("Consumo Total")  # Eixo Y
    ax.grid(True)  # Grade
    st.pyplot(fig)  # Exibe gr√°fico

# === GR√ÅFICO 4 ===
elif opcao == "üå°Ô∏è Temperatura M√©dia vs Consumo Total":
    st.subheader("üå°Ô∏è Temperatura M√©dia vs Consumo Total")  # Subt√≠tulo
    st.caption("üå°Ô∏è Gr√°fico 4 - Tipo: **Demonstrativo**. Analisa se regi√µes mais quentes consomem mais energia.")  # Descri√ß√£o

    fig, ax = plt.subplots(figsize=(8, 5))  # Figura
    sns.scatterplot(data=df, x="temp_media", y="total_consumo", ax=ax)  # Gr√°fico de dispers√£o
    ax.set_title("Temperatura M√©dia vs Consumo Total")  # T√≠tulo
    ax.set_xlabel("Temperatura M√©dia (¬∞C)")  # Eixo X
    ax.set_ylabel("Consumo Total")  # Eixo Y
    ax.grid(True)  # Grade
    st.pyplot(fig)  # Exibe gr√°fico

# === GR√ÅFICO 5 ===
elif opcao == "üöÄ Top 10 Crescimento de Consumo":
    st.subheader("üöÄ Top 10 Crescimento de Consumo")  # Subt√≠tulo
    st.caption("üöÄ Gr√°fico 5 - Tipo: **Descritivo e Demonstrativo**. Exibe as 10 localidades com maior aumento no consumo el√©trico entre 2006 e 2020.")  # Descri√ß√£o

    top_crescimento = df.sort_values(by="crescimento", ascending=False).head(10)  # Filtra top 10 com maior crescimento
    top_crescimento["localidade"] = top_crescimento.index.astype(str) + " - " + top_crescimento["bioma"]  # Cria nova coluna com nome + bioma
    top_crescimento = top_crescimento.reset_index(drop=True)  # Reseta o √≠ndice

    fig, ax = plt.subplots(figsize=(12, 5))  # Figura
    bars = sns.barplot(x=top_crescimento["localidade"], y=top_crescimento["crescimento"], ax=ax)  # Gr√°fico de barras

    ax.set_xlabel("Localidade (Estado - Bioma)")  # Eixo X
    ax.set_ylabel("Crescimento (GWh)")  # Eixo Y
    ax.set_title("Top 10 Localidades com Maior Crescimento de Consumo (2006‚Äì2020)")  # T√≠tulo
    ax.tick_params(axis='x', rotation=45)  # Rotaciona os nomes

    import matplotlib.ticker as ticker  # Importa para formata√ß√£o num√©rica
    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda x, _: f'{int(x):,}'.replace(',', '.')))  # Formata os valores no eixo Y

    for container in bars.containers:  # Adiciona valores nas barras
        bars.bar_label(container,
                       labels=[f'{int(v):,}'.replace(',', '.') for v in container.datavalues],
                       padding=3,
                       fontsize=9,
                       color='black')

    st.pyplot(fig)  # Exibe gr√°fico
